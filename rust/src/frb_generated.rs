// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.11.1";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = 1237720238;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__api__backend__chapter_list_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "chapter_list",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_comic_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let output_ok = crate::api::backend::chapter_list(&api_comic_id).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__backend__copy_global_reader_settings_to_comic_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "copy_global_reader_settings_to_comic",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_comic_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let output_ok =
                            crate::api::backend::copy_global_reader_settings_to_comic(api_comic_id)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__backend__delete_comic_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "delete_comic",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_comic_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let output_ok = crate::api::backend::delete_comic(api_comic_id).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__backend__delete_comic_reader_settings_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "delete_comic_reader_settings",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_comic_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let output_ok =
                            crate::api::backend::delete_comic_reader_settings(api_comic_id).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__backend__desktop_root_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "desktop_root",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::backend::desktop_root()?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__backend__find_comic_by_id_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "find_comic_by_id",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_comic_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let output_ok =
                            crate::api::backend::find_comic_by_id(&api_comic_id).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__simple__greet_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "greet",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_name = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::simple::greet(api_name))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__backend__image_list_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "image_list",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_chapter_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let output_ok = crate::api::backend::image_list(&api_chapter_id).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__backend__import_comic_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "import_comic",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_progress_sink = <StreamSink<
                String,
                flutter_rust_bridge::for_generated::SseCodec,
            >>::sse_decode(&mut deserializer);
            let api_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let output_ok =
                            crate::api::backend::import_comic(api_progress_sink, api_path).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__simple__init_app_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init_app",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::simple::init_app();
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__backend__init_backend_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init_backend",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_application_support_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let output_ok =
                            crate::api::backend::init_backend(api_application_support_path).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__backend__list_ready_comic_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "list_ready_comic",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let output_ok = crate::api::backend::list_ready_comic().await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__backend__load_app_settings_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "load_app_settings",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let output_ok = crate::api::backend::load_app_settings().await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__backend__modify_comic_star_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "modify_comic_star",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_comic_id = <String>::sse_decode(&mut deserializer);
            let api_star = <bool>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let output_ok =
                            crate::api::backend::modify_comic_star(&api_comic_id, api_star).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__backend__reader_settings_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "reader_settings",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_comic_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let output_ok = crate::api::backend::reader_settings(api_comic_id).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__backend__save_app_settings_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "save_app_settings",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_app_settings =
                <crate::database::app_settings::AppSettings>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let output_ok =
                            crate::api::backend::save_app_settings(api_app_settings).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__backend__update_comic_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "update_comic",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_comic_info = <crate::api::backend::ComicInfo>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let output_ok = crate::api::backend::update_comic(api_comic_info).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__backend__update_comic_cover_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "update_comic_cover",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_comic_id = <String>::sse_decode(&mut deserializer);
            let api_source = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let output_ok =
                            crate::api::backend::update_comic_cover(api_comic_id, api_source)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__backend__update_comic_read_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "update_comic_read",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_comic_id = <String>::sse_decode(&mut deserializer);
            let api_chapter_id = <String>::sse_decode(&mut deserializer);
            let api_chapter_title = <String>::sse_decode(&mut deserializer);
            let api_page_index = <i32>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let output_ok = crate::api::backend::update_comic_read(
                            api_comic_id,
                            api_chapter_id,
                            api_chapter_title,
                            api_page_index,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__backend__update_comic_reader_settings_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "update_comic_reader_settings",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_comic_id = <String>::sse_decode(&mut deserializer);
            let api_settings =
                <crate::database::reader_settings::ReaderSettings>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let output_ok = crate::api::backend::update_comic_reader_settings(
                            api_comic_id,
                            api_settings,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__backend__update_global_reader_settings_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "update_global_reader_settings",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_settings =
                <crate::database::reader_settings::ReaderSettings>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let output_ok =
                            crate::api::backend::update_global_reader_settings(api_settings)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}

// Section: static_checks

#[allow(clippy::unnecessary_literal_unwrap)]
const _: fn() = || {
    {
        let AppSettings = None::<crate::database::app_settings::AppSettings>.unwrap();
        let _: i64 = AppSettings.id;
        let _: String = AppSettings.theme;
        let _: String = AppSettings.dark_theme;
        let _: bool = AppSettings.copy_skip_confirm;
        let _: String = AppSettings.copy_comic_title_template;
        let _: bool = AppSettings.auto_full_screen_into_reader;
        let _: String = AppSettings.book_list_type;
        let _: i32 = AppSettings.font_scale_percent;
        let _: i32 = AppSettings.cover_width;
        let _: i32 = AppSettings.cover_height;
        let _: bool = AppSettings.annotation;
        let _: bool = AppSettings.full_screen_remove_bars;
    }
    {
        let ComicChapter = None::<crate::database::comic_chapter::ComicChapter>.unwrap();
        let _: String = ComicChapter.id;
        let _: String = ComicChapter.comic_id;
        let _: String = ComicChapter.title;
        let _: i32 = ComicChapter.index_in_comic;
        let _: i32 = ComicChapter.image_count;
    }
    {
        let ComicImage = None::<crate::database::comic_image::ComicImage>.unwrap();
        let _: String = ComicImage.id;
        let _: String = ComicImage.comic_id;
        let _: String = ComicImage.chapter_id;
        let _: i32 = ComicImage.index_in_chapter;
        let _: String = ComicImage.path;
        let _: i32 = ComicImage.width;
        let _: i32 = ComicImage.height;
        let _: String = ComicImage.format;
        let _: String = ComicImage.status;
    }
    {
        let ReaderSettings = None::<crate::database::reader_settings::ReaderSettings>.unwrap();
        let _: i64 = ReaderSettings.id;
        let _: String = ReaderSettings.settings_type;
        let _: String = ReaderSettings.comic_id;
        let _: String = ReaderSettings.template_name;
        let _: i64 = ReaderSettings.background_color;
        let _: String = ReaderSettings.reader_type;
        let _: String = ReaderSettings.touch_type;
        let _: String = ReaderSettings.reader_direction;
        let _: String = ReaderSettings.image_filter;
        let _: i64 = ReaderSettings.margin_top;
        let _: i64 = ReaderSettings.margin_bottom;
        let _: i64 = ReaderSettings.margin_left;
        let _: i64 = ReaderSettings.margin_right;
        let _: bool = ReaderSettings.enable_volume_control;
        let _: bool = ReaderSettings.annotation;
        let _: String = ReaderSettings.scroll_type;
        let _: i64 = ReaderSettings.scroll_percent;
    }
};

// Section: dart2rust

impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::anyhow::anyhow!("{}", inner);
    }
}

impl SseDecode for StreamSink<String, flutter_rust_bridge::for_generated::SseCodec> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return StreamSink::deserialize(inner);
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for crate::database::app_settings::AppSettings {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <i64>::sse_decode(deserializer);
        let mut var_theme = <String>::sse_decode(deserializer);
        let mut var_darkTheme = <String>::sse_decode(deserializer);
        let mut var_copySkipConfirm = <bool>::sse_decode(deserializer);
        let mut var_copyComicTitleTemplate = <String>::sse_decode(deserializer);
        let mut var_autoFullScreenIntoReader = <bool>::sse_decode(deserializer);
        let mut var_bookListType = <String>::sse_decode(deserializer);
        let mut var_fontScalePercent = <i32>::sse_decode(deserializer);
        let mut var_coverWidth = <i32>::sse_decode(deserializer);
        let mut var_coverHeight = <i32>::sse_decode(deserializer);
        let mut var_annotation = <bool>::sse_decode(deserializer);
        let mut var_fullScreenRemoveBars = <bool>::sse_decode(deserializer);
        return crate::database::app_settings::AppSettings {
            id: var_id,
            theme: var_theme,
            dark_theme: var_darkTheme,
            copy_skip_confirm: var_copySkipConfirm,
            copy_comic_title_template: var_copyComicTitleTemplate,
            auto_full_screen_into_reader: var_autoFullScreenIntoReader,
            book_list_type: var_bookListType,
            font_scale_percent: var_fontScalePercent,
            cover_width: var_coverWidth,
            cover_height: var_coverHeight,
            annotation: var_annotation,
            full_screen_remove_bars: var_fullScreenRemoveBars,
        };
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::database::comic_chapter::ComicChapter {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <String>::sse_decode(deserializer);
        let mut var_comicId = <String>::sse_decode(deserializer);
        let mut var_title = <String>::sse_decode(deserializer);
        let mut var_indexInComic = <i32>::sse_decode(deserializer);
        let mut var_imageCount = <i32>::sse_decode(deserializer);
        return crate::database::comic_chapter::ComicChapter {
            id: var_id,
            comic_id: var_comicId,
            title: var_title,
            index_in_comic: var_indexInComic,
            image_count: var_imageCount,
        };
    }
}

impl SseDecode for crate::database::comic_image::ComicImage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <String>::sse_decode(deserializer);
        let mut var_comicId = <String>::sse_decode(deserializer);
        let mut var_chapterId = <String>::sse_decode(deserializer);
        let mut var_indexInChapter = <i32>::sse_decode(deserializer);
        let mut var_path = <String>::sse_decode(deserializer);
        let mut var_width = <i32>::sse_decode(deserializer);
        let mut var_height = <i32>::sse_decode(deserializer);
        let mut var_format = <String>::sse_decode(deserializer);
        let mut var_status = <String>::sse_decode(deserializer);
        return crate::database::comic_image::ComicImage {
            id: var_id,
            comic_id: var_comicId,
            chapter_id: var_chapterId,
            index_in_chapter: var_indexInChapter,
            path: var_path,
            width: var_width,
            height: var_height,
            format: var_format,
            status: var_status,
        };
    }
}

impl SseDecode for crate::api::backend::ComicInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <String>::sse_decode(deserializer);
        let mut var_title = <String>::sse_decode(deserializer);
        let mut var_author = <String>::sse_decode(deserializer);
        let mut var_description = <String>::sse_decode(deserializer);
        let mut var_cover = <String>::sse_decode(deserializer);
        let mut var_chapterCount = <i32>::sse_decode(deserializer);
        let mut var_imageCount = <i32>::sse_decode(deserializer);
        let mut var_publishedDate = <String>::sse_decode(deserializer);
        let mut var_importTime = <i64>::sse_decode(deserializer);
        let mut var_lastReadTime = <i64>::sse_decode(deserializer);
        let mut var_lastReadChapterId = <String>::sse_decode(deserializer);
        let mut var_lastReadChapterTitle = <String>::sse_decode(deserializer);
        let mut var_lastReadPageIndex = <i32>::sse_decode(deserializer);
        let mut var_star = <bool>::sse_decode(deserializer);
        let mut var_status = <String>::sse_decode(deserializer);
        let mut var_tags = <Vec<String>>::sse_decode(deserializer);
        return crate::api::backend::ComicInfo {
            id: var_id,
            title: var_title,
            author: var_author,
            description: var_description,
            cover: var_cover,
            chapter_count: var_chapterCount,
            image_count: var_imageCount,
            published_date: var_publishedDate,
            import_time: var_importTime,
            last_read_time: var_lastReadTime,
            last_read_chapter_id: var_lastReadChapterId,
            last_read_chapter_title: var_lastReadChapterTitle,
            last_read_page_index: var_lastReadPageIndex,
            star: var_star,
            status: var_status,
            tags: var_tags,
        };
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<String>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::database::comic_chapter::ComicChapter> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::database::comic_chapter::ComicChapter>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::database::comic_image::ComicImage> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::database::comic_image::ComicImage>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::backend::ComicInfo> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::backend::ComicInfo>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Option<crate::api::backend::ComicInfo> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::backend::ComicInfo>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::database::reader_settings::ReaderSettings> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(
                <crate::database::reader_settings::ReaderSettings>::sse_decode(deserializer),
            );
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::database::reader_settings::ReaderSettings {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <i64>::sse_decode(deserializer);
        let mut var_settingsType = <String>::sse_decode(deserializer);
        let mut var_comicId = <String>::sse_decode(deserializer);
        let mut var_templateName = <String>::sse_decode(deserializer);
        let mut var_backgroundColor = <i64>::sse_decode(deserializer);
        let mut var_readerType = <String>::sse_decode(deserializer);
        let mut var_touchType = <String>::sse_decode(deserializer);
        let mut var_readerDirection = <String>::sse_decode(deserializer);
        let mut var_imageFilter = <String>::sse_decode(deserializer);
        let mut var_marginTop = <i64>::sse_decode(deserializer);
        let mut var_marginBottom = <i64>::sse_decode(deserializer);
        let mut var_marginLeft = <i64>::sse_decode(deserializer);
        let mut var_marginRight = <i64>::sse_decode(deserializer);
        let mut var_enableVolumeControl = <bool>::sse_decode(deserializer);
        let mut var_annotation = <bool>::sse_decode(deserializer);
        let mut var_scrollType = <String>::sse_decode(deserializer);
        let mut var_scrollPercent = <i64>::sse_decode(deserializer);
        return crate::database::reader_settings::ReaderSettings {
            id: var_id,
            settings_type: var_settingsType,
            comic_id: var_comicId,
            template_name: var_templateName,
            background_color: var_backgroundColor,
            reader_type: var_readerType,
            touch_type: var_touchType,
            reader_direction: var_readerDirection,
            image_filter: var_imageFilter,
            margin_top: var_marginTop,
            margin_bottom: var_marginBottom,
            margin_left: var_marginLeft,
            margin_right: var_marginRight,
            enable_volume_control: var_enableVolumeControl,
            annotation: var_annotation,
            scroll_type: var_scrollType,
            scroll_percent: var_scrollPercent,
        };
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        1 => wire__crate__api__backend__chapter_list_impl(port, ptr, rust_vec_len, data_len),
        2 => wire__crate__api__backend__copy_global_reader_settings_to_comic_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        3 => wire__crate__api__backend__delete_comic_impl(port, ptr, rust_vec_len, data_len),
        4 => wire__crate__api__backend__delete_comic_reader_settings_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        5 => wire__crate__api__backend__desktop_root_impl(port, ptr, rust_vec_len, data_len),
        6 => wire__crate__api__backend__find_comic_by_id_impl(port, ptr, rust_vec_len, data_len),
        8 => wire__crate__api__backend__image_list_impl(port, ptr, rust_vec_len, data_len),
        9 => wire__crate__api__backend__import_comic_impl(port, ptr, rust_vec_len, data_len),
        10 => wire__crate__api__simple__init_app_impl(port, ptr, rust_vec_len, data_len),
        11 => wire__crate__api__backend__init_backend_impl(port, ptr, rust_vec_len, data_len),
        12 => wire__crate__api__backend__list_ready_comic_impl(port, ptr, rust_vec_len, data_len),
        13 => wire__crate__api__backend__load_app_settings_impl(port, ptr, rust_vec_len, data_len),
        14 => wire__crate__api__backend__modify_comic_star_impl(port, ptr, rust_vec_len, data_len),
        15 => wire__crate__api__backend__reader_settings_impl(port, ptr, rust_vec_len, data_len),
        16 => wire__crate__api__backend__save_app_settings_impl(port, ptr, rust_vec_len, data_len),
        17 => wire__crate__api__backend__update_comic_impl(port, ptr, rust_vec_len, data_len),
        18 => wire__crate__api__backend__update_comic_cover_impl(port, ptr, rust_vec_len, data_len),
        19 => wire__crate__api__backend__update_comic_read_impl(port, ptr, rust_vec_len, data_len),
        20 => wire__crate__api__backend__update_comic_reader_settings_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        21 => wire__crate__api__backend__update_global_reader_settings_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        7 => wire__crate__api__simple__greet_impl(ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::database::app_settings::AppSettings> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.id.into_into_dart().into_dart(),
            self.0.theme.into_into_dart().into_dart(),
            self.0.dark_theme.into_into_dart().into_dart(),
            self.0.copy_skip_confirm.into_into_dart().into_dart(),
            self.0
                .copy_comic_title_template
                .into_into_dart()
                .into_dart(),
            self.0
                .auto_full_screen_into_reader
                .into_into_dart()
                .into_dart(),
            self.0.book_list_type.into_into_dart().into_dart(),
            self.0.font_scale_percent.into_into_dart().into_dart(),
            self.0.cover_width.into_into_dart().into_dart(),
            self.0.cover_height.into_into_dart().into_dart(),
            self.0.annotation.into_into_dart().into_dart(),
            self.0.full_screen_remove_bars.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::database::app_settings::AppSettings>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::database::app_settings::AppSettings>>
    for crate::database::app_settings::AppSettings
{
    fn into_into_dart(self) -> FrbWrapper<crate::database::app_settings::AppSettings> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::database::comic_chapter::ComicChapter> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.id.into_into_dart().into_dart(),
            self.0.comic_id.into_into_dart().into_dart(),
            self.0.title.into_into_dart().into_dart(),
            self.0.index_in_comic.into_into_dart().into_dart(),
            self.0.image_count.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::database::comic_chapter::ComicChapter>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::database::comic_chapter::ComicChapter>>
    for crate::database::comic_chapter::ComicChapter
{
    fn into_into_dart(self) -> FrbWrapper<crate::database::comic_chapter::ComicChapter> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::database::comic_image::ComicImage> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.id.into_into_dart().into_dart(),
            self.0.comic_id.into_into_dart().into_dart(),
            self.0.chapter_id.into_into_dart().into_dart(),
            self.0.index_in_chapter.into_into_dart().into_dart(),
            self.0.path.into_into_dart().into_dart(),
            self.0.width.into_into_dart().into_dart(),
            self.0.height.into_into_dart().into_dart(),
            self.0.format.into_into_dart().into_dart(),
            self.0.status.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::database::comic_image::ComicImage>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::database::comic_image::ComicImage>>
    for crate::database::comic_image::ComicImage
{
    fn into_into_dart(self) -> FrbWrapper<crate::database::comic_image::ComicImage> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::backend::ComicInfo {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.title.into_into_dart().into_dart(),
            self.author.into_into_dart().into_dart(),
            self.description.into_into_dart().into_dart(),
            self.cover.into_into_dart().into_dart(),
            self.chapter_count.into_into_dart().into_dart(),
            self.image_count.into_into_dart().into_dart(),
            self.published_date.into_into_dart().into_dart(),
            self.import_time.into_into_dart().into_dart(),
            self.last_read_time.into_into_dart().into_dart(),
            self.last_read_chapter_id.into_into_dart().into_dart(),
            self.last_read_chapter_title.into_into_dart().into_dart(),
            self.last_read_page_index.into_into_dart().into_dart(),
            self.star.into_into_dart().into_dart(),
            self.status.into_into_dart().into_dart(),
            self.tags.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::backend::ComicInfo
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::backend::ComicInfo>
    for crate::api::backend::ComicInfo
{
    fn into_into_dart(self) -> crate::api::backend::ComicInfo {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for FrbWrapper<crate::database::reader_settings::ReaderSettings>
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.id.into_into_dart().into_dart(),
            self.0.settings_type.into_into_dart().into_dart(),
            self.0.comic_id.into_into_dart().into_dart(),
            self.0.template_name.into_into_dart().into_dart(),
            self.0.background_color.into_into_dart().into_dart(),
            self.0.reader_type.into_into_dart().into_dart(),
            self.0.touch_type.into_into_dart().into_dart(),
            self.0.reader_direction.into_into_dart().into_dart(),
            self.0.image_filter.into_into_dart().into_dart(),
            self.0.margin_top.into_into_dart().into_dart(),
            self.0.margin_bottom.into_into_dart().into_dart(),
            self.0.margin_left.into_into_dart().into_dart(),
            self.0.margin_right.into_into_dart().into_dart(),
            self.0.enable_volume_control.into_into_dart().into_dart(),
            self.0.annotation.into_into_dart().into_dart(),
            self.0.scroll_type.into_into_dart().into_dart(),
            self.0.scroll_percent.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::database::reader_settings::ReaderSettings>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::database::reader_settings::ReaderSettings>>
    for crate::database::reader_settings::ReaderSettings
{
    fn into_into_dart(self) -> FrbWrapper<crate::database::reader_settings::ReaderSettings> {
        self.into()
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for StreamSink<String, flutter_rust_bridge::for_generated::SseCodec> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("")
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for crate::database::app_settings::AppSettings {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.theme, serializer);
        <String>::sse_encode(self.dark_theme, serializer);
        <bool>::sse_encode(self.copy_skip_confirm, serializer);
        <String>::sse_encode(self.copy_comic_title_template, serializer);
        <bool>::sse_encode(self.auto_full_screen_into_reader, serializer);
        <String>::sse_encode(self.book_list_type, serializer);
        <i32>::sse_encode(self.font_scale_percent, serializer);
        <i32>::sse_encode(self.cover_width, serializer);
        <i32>::sse_encode(self.cover_height, serializer);
        <bool>::sse_encode(self.annotation, serializer);
        <bool>::sse_encode(self.full_screen_remove_bars, serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::database::comic_chapter::ComicChapter {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.comic_id, serializer);
        <String>::sse_encode(self.title, serializer);
        <i32>::sse_encode(self.index_in_comic, serializer);
        <i32>::sse_encode(self.image_count, serializer);
    }
}

impl SseEncode for crate::database::comic_image::ComicImage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.comic_id, serializer);
        <String>::sse_encode(self.chapter_id, serializer);
        <i32>::sse_encode(self.index_in_chapter, serializer);
        <String>::sse_encode(self.path, serializer);
        <i32>::sse_encode(self.width, serializer);
        <i32>::sse_encode(self.height, serializer);
        <String>::sse_encode(self.format, serializer);
        <String>::sse_encode(self.status, serializer);
    }
}

impl SseEncode for crate::api::backend::ComicInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.title, serializer);
        <String>::sse_encode(self.author, serializer);
        <String>::sse_encode(self.description, serializer);
        <String>::sse_encode(self.cover, serializer);
        <i32>::sse_encode(self.chapter_count, serializer);
        <i32>::sse_encode(self.image_count, serializer);
        <String>::sse_encode(self.published_date, serializer);
        <i64>::sse_encode(self.import_time, serializer);
        <i64>::sse_encode(self.last_read_time, serializer);
        <String>::sse_encode(self.last_read_chapter_id, serializer);
        <String>::sse_encode(self.last_read_chapter_title, serializer);
        <i32>::sse_encode(self.last_read_page_index, serializer);
        <bool>::sse_encode(self.star, serializer);
        <String>::sse_encode(self.status, serializer);
        <Vec<String>>::sse_encode(self.tags, serializer);
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <String>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::database::comic_chapter::ComicChapter> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::database::comic_chapter::ComicChapter>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::database::comic_image::ComicImage> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::database::comic_image::ComicImage>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::backend::ComicInfo> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::backend::ComicInfo>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::backend::ComicInfo> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::backend::ComicInfo>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::database::reader_settings::ReaderSettings> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::database::reader_settings::ReaderSettings>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for crate::database::reader_settings::ReaderSettings {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.settings_type, serializer);
        <String>::sse_encode(self.comic_id, serializer);
        <String>::sse_encode(self.template_name, serializer);
        <i64>::sse_encode(self.background_color, serializer);
        <String>::sse_encode(self.reader_type, serializer);
        <String>::sse_encode(self.touch_type, serializer);
        <String>::sse_encode(self.reader_direction, serializer);
        <String>::sse_encode(self.image_filter, serializer);
        <i64>::sse_encode(self.margin_top, serializer);
        <i64>::sse_encode(self.margin_bottom, serializer);
        <i64>::sse_encode(self.margin_left, serializer);
        <i64>::sse_encode(self.margin_right, serializer);
        <bool>::sse_encode(self.enable_volume_control, serializer);
        <bool>::sse_encode(self.annotation, serializer);
        <String>::sse_encode(self.scroll_type, serializer);
        <i64>::sse_encode(self.scroll_percent, serializer);
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.11.1.

    // Section: imports

    use super::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_io!();
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.11.1.

    // Section: imports

    use super::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::wasm_bindgen;
    use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_web!();
}
#[cfg(target_family = "wasm")]
pub use web::*;
