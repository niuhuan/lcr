// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/backend.dart';
import 'api/simple.dart';
import 'dart:async';
import 'dart:convert';
import 'database/app_settings.dart';
import 'database/comic_chapter.dart';
import 'database/comic_image.dart';
import 'database/reader_settings.dart';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiSimpleInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => 1237720238;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'rust_lib_lcr',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  Future<List<ComicChapter>> crateApiBackendChapterList({
    required String comicId,
  });

  Future<void> crateApiBackendCopyGlobalReaderSettingsToComic({
    required String comicId,
  });

  Future<void> crateApiBackendDeleteComic({required String comicId});

  Future<void> crateApiBackendDeleteComicReaderSettings({
    required String comicId,
  });

  Future<String> crateApiBackendDesktopRoot();

  Future<ComicInfo?> crateApiBackendFindComicById({required String comicId});

  String crateApiSimpleGreet({required String name});

  Future<List<ComicImage>> crateApiBackendImageList({
    required String chapterId,
  });

  Stream<String> crateApiBackendImportComic({required String path});

  Future<void> crateApiSimpleInitApp();

  Future<bool> crateApiBackendInitBackend({
    required String applicationSupportPath,
  });

  Future<List<ComicInfo>> crateApiBackendListReadyComic();

  Future<AppSettings> crateApiBackendLoadAppSettings();

  Future<void> crateApiBackendModifyComicStar({
    required String comicId,
    required bool star,
  });

  Future<ReaderSettings?> crateApiBackendReaderSettings({
    required String comicId,
  });

  Future<void> crateApiBackendSaveAppSettings({
    required AppSettings appSettings,
  });

  Future<void> crateApiBackendUpdateComic({required ComicInfo comicInfo});

  Future<void> crateApiBackendUpdateComicCover({
    required String comicId,
    required String source,
  });

  Future<void> crateApiBackendUpdateComicRead({
    required String comicId,
    required String chapterId,
    required String chapterTitle,
    required int pageIndex,
  });

  Future<void> crateApiBackendUpdateComicReaderSettings({
    required String comicId,
    required ReaderSettings settings,
  });

  Future<void> crateApiBackendUpdateGlobalReaderSettings({
    required ReaderSettings settings,
  });
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<List<ComicChapter>> crateApiBackendChapterList({
    required String comicId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(comicId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 1,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_comic_chapter,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiBackendChapterListConstMeta,
        argValues: [comicId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBackendChapterListConstMeta =>
      const TaskConstMeta(debugName: "chapter_list", argNames: ["comicId"]);

  @override
  Future<void> crateApiBackendCopyGlobalReaderSettingsToComic({
    required String comicId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(comicId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 2,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiBackendCopyGlobalReaderSettingsToComicConstMeta,
        argValues: [comicId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBackendCopyGlobalReaderSettingsToComicConstMeta =>
      const TaskConstMeta(
        debugName: "copy_global_reader_settings_to_comic",
        argNames: ["comicId"],
      );

  @override
  Future<void> crateApiBackendDeleteComic({required String comicId}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(comicId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 3,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiBackendDeleteComicConstMeta,
        argValues: [comicId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBackendDeleteComicConstMeta =>
      const TaskConstMeta(debugName: "delete_comic", argNames: ["comicId"]);

  @override
  Future<void> crateApiBackendDeleteComicReaderSettings({
    required String comicId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(comicId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 4,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiBackendDeleteComicReaderSettingsConstMeta,
        argValues: [comicId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBackendDeleteComicReaderSettingsConstMeta =>
      const TaskConstMeta(
        debugName: "delete_comic_reader_settings",
        argNames: ["comicId"],
      );

  @override
  Future<String> crateApiBackendDesktopRoot() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 5,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiBackendDesktopRootConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBackendDesktopRootConstMeta =>
      const TaskConstMeta(debugName: "desktop_root", argNames: []);

  @override
  Future<ComicInfo?> crateApiBackendFindComicById({required String comicId}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(comicId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 6,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_comic_info,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiBackendFindComicByIdConstMeta,
        argValues: [comicId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBackendFindComicByIdConstMeta =>
      const TaskConstMeta(debugName: "find_comic_by_id", argNames: ["comicId"]);

  @override
  String crateApiSimpleGreet({required String name}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(name, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleGreetConstMeta,
        argValues: [name],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleGreetConstMeta =>
      const TaskConstMeta(debugName: "greet", argNames: ["name"]);

  @override
  Future<List<ComicImage>> crateApiBackendImageList({
    required String chapterId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(chapterId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 8,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_comic_image,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiBackendImageListConstMeta,
        argValues: [chapterId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBackendImageListConstMeta =>
      const TaskConstMeta(debugName: "image_list", argNames: ["chapterId"]);

  @override
  Stream<String> crateApiBackendImportComic({required String path}) {
    final progressSink = RustStreamSink<String>();
    unawaited(
      handler.executeNormal(
        NormalTask(
          callFfi: (port_) {
            final serializer = SseSerializer(generalizedFrbRustBinding);
            sse_encode_StreamSink_String_Sse(progressSink, serializer);
            sse_encode_String(path, serializer);
            pdeCallFfi(
              generalizedFrbRustBinding,
              serializer,
              funcId: 9,
              port: port_,
            );
          },
          codec: SseCodec(
            decodeSuccessData: sse_decode_unit,
            decodeErrorData: sse_decode_AnyhowException,
          ),
          constMeta: kCrateApiBackendImportComicConstMeta,
          argValues: [progressSink, path],
          apiImpl: this,
        ),
      ),
    );
    return progressSink.stream;
  }

  TaskConstMeta get kCrateApiBackendImportComicConstMeta => const TaskConstMeta(
    debugName: "import_comic",
    argNames: ["progressSink", "path"],
  );

  @override
  Future<void> crateApiSimpleInitApp() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 10,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleInitAppConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleInitAppConstMeta =>
      const TaskConstMeta(debugName: "init_app", argNames: []);

  @override
  Future<bool> crateApiBackendInitBackend({
    required String applicationSupportPath,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(applicationSupportPath, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 11,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiBackendInitBackendConstMeta,
        argValues: [applicationSupportPath],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBackendInitBackendConstMeta => const TaskConstMeta(
    debugName: "init_backend",
    argNames: ["applicationSupportPath"],
  );

  @override
  Future<List<ComicInfo>> crateApiBackendListReadyComic() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 12,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_comic_info,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiBackendListReadyComicConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBackendListReadyComicConstMeta =>
      const TaskConstMeta(debugName: "list_ready_comic", argNames: []);

  @override
  Future<AppSettings> crateApiBackendLoadAppSettings() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 13,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_app_settings,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiBackendLoadAppSettingsConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBackendLoadAppSettingsConstMeta =>
      const TaskConstMeta(debugName: "load_app_settings", argNames: []);

  @override
  Future<void> crateApiBackendModifyComicStar({
    required String comicId,
    required bool star,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(comicId, serializer);
          sse_encode_bool(star, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 14,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiBackendModifyComicStarConstMeta,
        argValues: [comicId, star],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBackendModifyComicStarConstMeta =>
      const TaskConstMeta(
        debugName: "modify_comic_star",
        argNames: ["comicId", "star"],
      );

  @override
  Future<ReaderSettings?> crateApiBackendReaderSettings({
    required String comicId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(comicId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 15,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_reader_settings,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiBackendReaderSettingsConstMeta,
        argValues: [comicId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBackendReaderSettingsConstMeta =>
      const TaskConstMeta(debugName: "reader_settings", argNames: ["comicId"]);

  @override
  Future<void> crateApiBackendSaveAppSettings({
    required AppSettings appSettings,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_app_settings(appSettings, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 16,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiBackendSaveAppSettingsConstMeta,
        argValues: [appSettings],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBackendSaveAppSettingsConstMeta =>
      const TaskConstMeta(
        debugName: "save_app_settings",
        argNames: ["appSettings"],
      );

  @override
  Future<void> crateApiBackendUpdateComic({required ComicInfo comicInfo}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_comic_info(comicInfo, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 17,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiBackendUpdateComicConstMeta,
        argValues: [comicInfo],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBackendUpdateComicConstMeta =>
      const TaskConstMeta(debugName: "update_comic", argNames: ["comicInfo"]);

  @override
  Future<void> crateApiBackendUpdateComicCover({
    required String comicId,
    required String source,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(comicId, serializer);
          sse_encode_String(source, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 18,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiBackendUpdateComicCoverConstMeta,
        argValues: [comicId, source],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBackendUpdateComicCoverConstMeta =>
      const TaskConstMeta(
        debugName: "update_comic_cover",
        argNames: ["comicId", "source"],
      );

  @override
  Future<void> crateApiBackendUpdateComicRead({
    required String comicId,
    required String chapterId,
    required String chapterTitle,
    required int pageIndex,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(comicId, serializer);
          sse_encode_String(chapterId, serializer);
          sse_encode_String(chapterTitle, serializer);
          sse_encode_i_32(pageIndex, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 19,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiBackendUpdateComicReadConstMeta,
        argValues: [comicId, chapterId, chapterTitle, pageIndex],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBackendUpdateComicReadConstMeta =>
      const TaskConstMeta(
        debugName: "update_comic_read",
        argNames: ["comicId", "chapterId", "chapterTitle", "pageIndex"],
      );

  @override
  Future<void> crateApiBackendUpdateComicReaderSettings({
    required String comicId,
    required ReaderSettings settings,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(comicId, serializer);
          sse_encode_box_autoadd_reader_settings(settings, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 20,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiBackendUpdateComicReaderSettingsConstMeta,
        argValues: [comicId, settings],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBackendUpdateComicReaderSettingsConstMeta =>
      const TaskConstMeta(
        debugName: "update_comic_reader_settings",
        argNames: ["comicId", "settings"],
      );

  @override
  Future<void> crateApiBackendUpdateGlobalReaderSettings({
    required ReaderSettings settings,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_reader_settings(settings, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 21,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiBackendUpdateGlobalReaderSettingsConstMeta,
        argValues: [settings],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBackendUpdateGlobalReaderSettingsConstMeta =>
      const TaskConstMeta(
        debugName: "update_global_reader_settings",
        argNames: ["settings"],
      );

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  RustStreamSink<String> dco_decode_StreamSink_String_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  AppSettings dco_decode_app_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 13)
      throw Exception('unexpected arr length: expect 13 but see ${arr.length}');
    return AppSettings(
      id: dco_decode_i_64(arr[0]),
      theme: dco_decode_String(arr[1]),
      darkTheme: dco_decode_String(arr[2]),
      copySkipConfirm: dco_decode_bool(arr[3]),
      copyComicTitleTemplate: dco_decode_String(arr[4]),
      autoFullScreenIntoReader: dco_decode_bool(arr[5]),
      bookListType: dco_decode_String(arr[6]),
      fontScalePercent: dco_decode_i_32(arr[7]),
      coverWidth: dco_decode_i_32(arr[8]),
      coverHeight: dco_decode_i_32(arr[9]),
      annotation: dco_decode_bool(arr[10]),
      fullScreenRemoveBars: dco_decode_bool(arr[11]),
      enableVolumeControl: dco_decode_bool(arr[12]),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  AppSettings dco_decode_box_autoadd_app_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_app_settings(raw);
  }

  @protected
  ComicInfo dco_decode_box_autoadd_comic_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_comic_info(raw);
  }

  @protected
  ReaderSettings dco_decode_box_autoadd_reader_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_reader_settings(raw);
  }

  @protected
  ComicChapter dco_decode_comic_chapter(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return ComicChapter(
      id: dco_decode_String(arr[0]),
      comicId: dco_decode_String(arr[1]),
      title: dco_decode_String(arr[2]),
      indexInComic: dco_decode_i_32(arr[3]),
      imageCount: dco_decode_i_32(arr[4]),
    );
  }

  @protected
  ComicImage dco_decode_comic_image(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 9)
      throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
    return ComicImage(
      id: dco_decode_String(arr[0]),
      comicId: dco_decode_String(arr[1]),
      chapterId: dco_decode_String(arr[2]),
      indexInChapter: dco_decode_i_32(arr[3]),
      path: dco_decode_String(arr[4]),
      width: dco_decode_i_32(arr[5]),
      height: dco_decode_i_32(arr[6]),
      format: dco_decode_String(arr[7]),
      status: dco_decode_String(arr[8]),
    );
  }

  @protected
  ComicInfo dco_decode_comic_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 16)
      throw Exception('unexpected arr length: expect 16 but see ${arr.length}');
    return ComicInfo(
      id: dco_decode_String(arr[0]),
      title: dco_decode_String(arr[1]),
      author: dco_decode_String(arr[2]),
      description: dco_decode_String(arr[3]),
      cover: dco_decode_String(arr[4]),
      chapterCount: dco_decode_i_32(arr[5]),
      imageCount: dco_decode_i_32(arr[6]),
      publishedDate: dco_decode_String(arr[7]),
      importTime: dco_decode_i_64(arr[8]),
      lastReadTime: dco_decode_i_64(arr[9]),
      lastReadChapterId: dco_decode_String(arr[10]),
      lastReadChapterTitle: dco_decode_String(arr[11]),
      lastReadPageIndex: dco_decode_i_32(arr[12]),
      star: dco_decode_bool(arr[13]),
      status: dco_decode_String(arr[14]),
      tags: dco_decode_list_String(arr[15]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<ComicChapter> dco_decode_list_comic_chapter(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_comic_chapter).toList();
  }

  @protected
  List<ComicImage> dco_decode_list_comic_image(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_comic_image).toList();
  }

  @protected
  List<ComicInfo> dco_decode_list_comic_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_comic_info).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  ComicInfo? dco_decode_opt_box_autoadd_comic_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_comic_info(raw);
  }

  @protected
  ReaderSettings? dco_decode_opt_box_autoadd_reader_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_reader_settings(raw);
  }

  @protected
  ReaderSettings dco_decode_reader_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 16)
      throw Exception('unexpected arr length: expect 16 but see ${arr.length}');
    return ReaderSettings(
      id: dco_decode_i_64(arr[0]),
      settingsType: dco_decode_String(arr[1]),
      comicId: dco_decode_String(arr[2]),
      templateName: dco_decode_String(arr[3]),
      backgroundColor: dco_decode_i_64(arr[4]),
      readerType: dco_decode_String(arr[5]),
      touchType: dco_decode_String(arr[6]),
      readerDirection: dco_decode_String(arr[7]),
      imageFilter: dco_decode_String(arr[8]),
      marginTop: dco_decode_i_64(arr[9]),
      marginBottom: dco_decode_i_64(arr[10]),
      marginLeft: dco_decode_i_64(arr[11]),
      marginRight: dco_decode_i_64(arr[12]),
      annotation: dco_decode_bool(arr[13]),
      scrollType: dco_decode_String(arr[14]),
      scrollPercent: dco_decode_i_64(arr[15]),
    );
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  RustStreamSink<String> sse_decode_StreamSink_String_Sse(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  AppSettings sse_decode_app_settings(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_i_64(deserializer);
    var var_theme = sse_decode_String(deserializer);
    var var_darkTheme = sse_decode_String(deserializer);
    var var_copySkipConfirm = sse_decode_bool(deserializer);
    var var_copyComicTitleTemplate = sse_decode_String(deserializer);
    var var_autoFullScreenIntoReader = sse_decode_bool(deserializer);
    var var_bookListType = sse_decode_String(deserializer);
    var var_fontScalePercent = sse_decode_i_32(deserializer);
    var var_coverWidth = sse_decode_i_32(deserializer);
    var var_coverHeight = sse_decode_i_32(deserializer);
    var var_annotation = sse_decode_bool(deserializer);
    var var_fullScreenRemoveBars = sse_decode_bool(deserializer);
    var var_enableVolumeControl = sse_decode_bool(deserializer);
    return AppSettings(
      id: var_id,
      theme: var_theme,
      darkTheme: var_darkTheme,
      copySkipConfirm: var_copySkipConfirm,
      copyComicTitleTemplate: var_copyComicTitleTemplate,
      autoFullScreenIntoReader: var_autoFullScreenIntoReader,
      bookListType: var_bookListType,
      fontScalePercent: var_fontScalePercent,
      coverWidth: var_coverWidth,
      coverHeight: var_coverHeight,
      annotation: var_annotation,
      fullScreenRemoveBars: var_fullScreenRemoveBars,
      enableVolumeControl: var_enableVolumeControl,
    );
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  AppSettings sse_decode_box_autoadd_app_settings(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_app_settings(deserializer));
  }

  @protected
  ComicInfo sse_decode_box_autoadd_comic_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_comic_info(deserializer));
  }

  @protected
  ReaderSettings sse_decode_box_autoadd_reader_settings(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_reader_settings(deserializer));
  }

  @protected
  ComicChapter sse_decode_comic_chapter(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_comicId = sse_decode_String(deserializer);
    var var_title = sse_decode_String(deserializer);
    var var_indexInComic = sse_decode_i_32(deserializer);
    var var_imageCount = sse_decode_i_32(deserializer);
    return ComicChapter(
      id: var_id,
      comicId: var_comicId,
      title: var_title,
      indexInComic: var_indexInComic,
      imageCount: var_imageCount,
    );
  }

  @protected
  ComicImage sse_decode_comic_image(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_comicId = sse_decode_String(deserializer);
    var var_chapterId = sse_decode_String(deserializer);
    var var_indexInChapter = sse_decode_i_32(deserializer);
    var var_path = sse_decode_String(deserializer);
    var var_width = sse_decode_i_32(deserializer);
    var var_height = sse_decode_i_32(deserializer);
    var var_format = sse_decode_String(deserializer);
    var var_status = sse_decode_String(deserializer);
    return ComicImage(
      id: var_id,
      comicId: var_comicId,
      chapterId: var_chapterId,
      indexInChapter: var_indexInChapter,
      path: var_path,
      width: var_width,
      height: var_height,
      format: var_format,
      status: var_status,
    );
  }

  @protected
  ComicInfo sse_decode_comic_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_title = sse_decode_String(deserializer);
    var var_author = sse_decode_String(deserializer);
    var var_description = sse_decode_String(deserializer);
    var var_cover = sse_decode_String(deserializer);
    var var_chapterCount = sse_decode_i_32(deserializer);
    var var_imageCount = sse_decode_i_32(deserializer);
    var var_publishedDate = sse_decode_String(deserializer);
    var var_importTime = sse_decode_i_64(deserializer);
    var var_lastReadTime = sse_decode_i_64(deserializer);
    var var_lastReadChapterId = sse_decode_String(deserializer);
    var var_lastReadChapterTitle = sse_decode_String(deserializer);
    var var_lastReadPageIndex = sse_decode_i_32(deserializer);
    var var_star = sse_decode_bool(deserializer);
    var var_status = sse_decode_String(deserializer);
    var var_tags = sse_decode_list_String(deserializer);
    return ComicInfo(
      id: var_id,
      title: var_title,
      author: var_author,
      description: var_description,
      cover: var_cover,
      chapterCount: var_chapterCount,
      imageCount: var_imageCount,
      publishedDate: var_publishedDate,
      importTime: var_importTime,
      lastReadTime: var_lastReadTime,
      lastReadChapterId: var_lastReadChapterId,
      lastReadChapterTitle: var_lastReadChapterTitle,
      lastReadPageIndex: var_lastReadPageIndex,
      star: var_star,
      status: var_status,
      tags: var_tags,
    );
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<ComicChapter> sse_decode_list_comic_chapter(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ComicChapter>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_comic_chapter(deserializer));
    }
    return ans_;
  }

  @protected
  List<ComicImage> sse_decode_list_comic_image(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ComicImage>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_comic_image(deserializer));
    }
    return ans_;
  }

  @protected
  List<ComicInfo> sse_decode_list_comic_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ComicInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_comic_info(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  ComicInfo? sse_decode_opt_box_autoadd_comic_info(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_comic_info(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ReaderSettings? sse_decode_opt_box_autoadd_reader_settings(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_reader_settings(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ReaderSettings sse_decode_reader_settings(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_i_64(deserializer);
    var var_settingsType = sse_decode_String(deserializer);
    var var_comicId = sse_decode_String(deserializer);
    var var_templateName = sse_decode_String(deserializer);
    var var_backgroundColor = sse_decode_i_64(deserializer);
    var var_readerType = sse_decode_String(deserializer);
    var var_touchType = sse_decode_String(deserializer);
    var var_readerDirection = sse_decode_String(deserializer);
    var var_imageFilter = sse_decode_String(deserializer);
    var var_marginTop = sse_decode_i_64(deserializer);
    var var_marginBottom = sse_decode_i_64(deserializer);
    var var_marginLeft = sse_decode_i_64(deserializer);
    var var_marginRight = sse_decode_i_64(deserializer);
    var var_annotation = sse_decode_bool(deserializer);
    var var_scrollType = sse_decode_String(deserializer);
    var var_scrollPercent = sse_decode_i_64(deserializer);
    return ReaderSettings(
      id: var_id,
      settingsType: var_settingsType,
      comicId: var_comicId,
      templateName: var_templateName,
      backgroundColor: var_backgroundColor,
      readerType: var_readerType,
      touchType: var_touchType,
      readerDirection: var_readerDirection,
      imageFilter: var_imageFilter,
      marginTop: var_marginTop,
      marginBottom: var_marginBottom,
      marginLeft: var_marginLeft,
      marginRight: var_marginRight,
      annotation: var_annotation,
      scrollType: var_scrollType,
      scrollPercent: var_scrollPercent,
    );
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_AnyhowException(
    AnyhowException self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_StreamSink_String_Sse(
    RustStreamSink<String> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
      self.setupAndSerialize(
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
      ),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_app_settings(AppSettings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.id, serializer);
    sse_encode_String(self.theme, serializer);
    sse_encode_String(self.darkTheme, serializer);
    sse_encode_bool(self.copySkipConfirm, serializer);
    sse_encode_String(self.copyComicTitleTemplate, serializer);
    sse_encode_bool(self.autoFullScreenIntoReader, serializer);
    sse_encode_String(self.bookListType, serializer);
    sse_encode_i_32(self.fontScalePercent, serializer);
    sse_encode_i_32(self.coverWidth, serializer);
    sse_encode_i_32(self.coverHeight, serializer);
    sse_encode_bool(self.annotation, serializer);
    sse_encode_bool(self.fullScreenRemoveBars, serializer);
    sse_encode_bool(self.enableVolumeControl, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_app_settings(
    AppSettings self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_app_settings(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_comic_info(
    ComicInfo self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_comic_info(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_reader_settings(
    ReaderSettings self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_reader_settings(self, serializer);
  }

  @protected
  void sse_encode_comic_chapter(ComicChapter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.comicId, serializer);
    sse_encode_String(self.title, serializer);
    sse_encode_i_32(self.indexInComic, serializer);
    sse_encode_i_32(self.imageCount, serializer);
  }

  @protected
  void sse_encode_comic_image(ComicImage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.comicId, serializer);
    sse_encode_String(self.chapterId, serializer);
    sse_encode_i_32(self.indexInChapter, serializer);
    sse_encode_String(self.path, serializer);
    sse_encode_i_32(self.width, serializer);
    sse_encode_i_32(self.height, serializer);
    sse_encode_String(self.format, serializer);
    sse_encode_String(self.status, serializer);
  }

  @protected
  void sse_encode_comic_info(ComicInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.title, serializer);
    sse_encode_String(self.author, serializer);
    sse_encode_String(self.description, serializer);
    sse_encode_String(self.cover, serializer);
    sse_encode_i_32(self.chapterCount, serializer);
    sse_encode_i_32(self.imageCount, serializer);
    sse_encode_String(self.publishedDate, serializer);
    sse_encode_i_64(self.importTime, serializer);
    sse_encode_i_64(self.lastReadTime, serializer);
    sse_encode_String(self.lastReadChapterId, serializer);
    sse_encode_String(self.lastReadChapterTitle, serializer);
    sse_encode_i_32(self.lastReadPageIndex, serializer);
    sse_encode_bool(self.star, serializer);
    sse_encode_String(self.status, serializer);
    sse_encode_list_String(self.tags, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_comic_chapter(
    List<ComicChapter> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_comic_chapter(item, serializer);
    }
  }

  @protected
  void sse_encode_list_comic_image(
    List<ComicImage> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_comic_image(item, serializer);
    }
  }

  @protected
  void sse_encode_list_comic_info(
    List<ComicInfo> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_comic_info(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_box_autoadd_comic_info(
    ComicInfo? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_comic_info(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_reader_settings(
    ReaderSettings? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_reader_settings(self, serializer);
    }
  }

  @protected
  void sse_encode_reader_settings(
    ReaderSettings self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.id, serializer);
    sse_encode_String(self.settingsType, serializer);
    sse_encode_String(self.comicId, serializer);
    sse_encode_String(self.templateName, serializer);
    sse_encode_i_64(self.backgroundColor, serializer);
    sse_encode_String(self.readerType, serializer);
    sse_encode_String(self.touchType, serializer);
    sse_encode_String(self.readerDirection, serializer);
    sse_encode_String(self.imageFilter, serializer);
    sse_encode_i_64(self.marginTop, serializer);
    sse_encode_i_64(self.marginBottom, serializer);
    sse_encode_i_64(self.marginLeft, serializer);
    sse_encode_i_64(self.marginRight, serializer);
    sse_encode_bool(self.annotation, serializer);
    sse_encode_String(self.scrollType, serializer);
    sse_encode_i_64(self.scrollPercent, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }
}
