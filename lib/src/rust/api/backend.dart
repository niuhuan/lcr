// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../database/app_settings.dart';
import '../database/comic_chapter.dart';
import '../database/comic_image.dart';
import '../database/reader_settings.dart';
import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `fmt`

Future<String> desktopRoot() =>
    RustLib.instance.api.crateApiBackendDesktopRoot();

Future<void> deleteComic({required String comicId}) =>
    RustLib.instance.api.crateApiBackendDeleteComic(comicId: comicId);

Future<bool> initBackend({required String applicationSupportPath}) => RustLib
    .instance
    .api
    .crateApiBackendInitBackend(applicationSupportPath: applicationSupportPath);

Future<AppSettings> loadAppSettings() =>
    RustLib.instance.api.crateApiBackendLoadAppSettings();

Future<void> saveAppSettings({required AppSettings appSettings}) => RustLib
    .instance
    .api
    .crateApiBackendSaveAppSettings(appSettings: appSettings);

Stream<String> importComic({required String path}) =>
    RustLib.instance.api.crateApiBackendImportComic(path: path);

Future<ComicInfo?> findComicById({required String comicId}) =>
    RustLib.instance.api.crateApiBackendFindComicById(comicId: comicId);

Future<List<ComicInfo>> listReadyComic() =>
    RustLib.instance.api.crateApiBackendListReadyComic();

Future<void> updateComic({required ComicInfo comicInfo}) =>
    RustLib.instance.api.crateApiBackendUpdateComic(comicInfo: comicInfo);

Future<void> updateComicCover({
  required String comicId,
  required String source,
}) => RustLib.instance.api.crateApiBackendUpdateComicCover(
  comicId: comicId,
  source: source,
);

Future<void> modifyComicStar({required String comicId, required bool star}) =>
    RustLib.instance.api.crateApiBackendModifyComicStar(
      comicId: comicId,
      star: star,
    );

Future<ReaderSettings?> readerSettings({required String comicId}) =>
    RustLib.instance.api.crateApiBackendReaderSettings(comicId: comicId);

Future<List<ComicChapter>> chapterList({required String comicId}) =>
    RustLib.instance.api.crateApiBackendChapterList(comicId: comicId);

Future<List<ComicImage>> imageList({required String chapterId}) =>
    RustLib.instance.api.crateApiBackendImageList(chapterId: chapterId);

Future<void> updateComicRead({
  required String comicId,
  required String chapterId,
  required String chapterTitle,
  required int pageIndex,
}) => RustLib.instance.api.crateApiBackendUpdateComicRead(
  comicId: comicId,
  chapterId: chapterId,
  chapterTitle: chapterTitle,
  pageIndex: pageIndex,
);

Future<void> copyGlobalReaderSettingsToComic({required String comicId}) =>
    RustLib.instance.api.crateApiBackendCopyGlobalReaderSettingsToComic(
      comicId: comicId,
    );

Future<void> deleteComicReaderSettings({required String comicId}) => RustLib
    .instance
    .api
    .crateApiBackendDeleteComicReaderSettings(comicId: comicId);

Future<void> updateComicReaderSettings({
  required String comicId,
  required ReaderSettings settings,
}) => RustLib.instance.api.crateApiBackendUpdateComicReaderSettings(
  comicId: comicId,
  settings: settings,
);

Future<void> updateGlobalReaderSettings({required ReaderSettings settings}) =>
    RustLib.instance.api.crateApiBackendUpdateGlobalReaderSettings(
      settings: settings,
    );

class ComicInfo {
  final String id;
  final String title;
  final String author;
  final String description;
  final String cover;
  final int chapterCount;
  final int imageCount;
  final String publishedDate;
  final PlatformInt64 importTime;
  final PlatformInt64 lastReadTime;
  final String lastReadChapterId;
  final String lastReadChapterTitle;
  final int lastReadPageIndex;
  final bool star;
  final String status;
  final List<String> tags;

  const ComicInfo({
    required this.id,
    required this.title,
    required this.author,
    required this.description,
    required this.cover,
    required this.chapterCount,
    required this.imageCount,
    required this.publishedDate,
    required this.importTime,
    required this.lastReadTime,
    required this.lastReadChapterId,
    required this.lastReadChapterTitle,
    required this.lastReadPageIndex,
    required this.star,
    required this.status,
    required this.tags,
  });

  @override
  int get hashCode =>
      id.hashCode ^
      title.hashCode ^
      author.hashCode ^
      description.hashCode ^
      cover.hashCode ^
      chapterCount.hashCode ^
      imageCount.hashCode ^
      publishedDate.hashCode ^
      importTime.hashCode ^
      lastReadTime.hashCode ^
      lastReadChapterId.hashCode ^
      lastReadChapterTitle.hashCode ^
      lastReadPageIndex.hashCode ^
      star.hashCode ^
      status.hashCode ^
      tags.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ComicInfo &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          title == other.title &&
          author == other.author &&
          description == other.description &&
          cover == other.cover &&
          chapterCount == other.chapterCount &&
          imageCount == other.imageCount &&
          publishedDate == other.publishedDate &&
          importTime == other.importTime &&
          lastReadTime == other.lastReadTime &&
          lastReadChapterId == other.lastReadChapterId &&
          lastReadChapterTitle == other.lastReadChapterTitle &&
          lastReadPageIndex == other.lastReadPageIndex &&
          star == other.star &&
          status == other.status &&
          tags == other.tags;
}
